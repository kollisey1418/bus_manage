import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_colorpicker/flutter_colorpicker.dart';
import '../models/bus.dart';
import '../providers/bus_provider.dart';

class AddBusDialog extends ConsumerStatefulWidget {
  const AddBusDialog({super.key});

  @override
  ConsumerState<AddBusDialog> createState() => _AddBusDialogState();
}

class _AddBusDialogState extends ConsumerState<AddBusDialog> {
  final _formKey = GlobalKey<FormState>();
  final _brandController = TextEditingController();
  final _modelController = TextEditingController();
  final _plateNumberController = TextEditingController();
  BusStatus _selectedStatus = BusStatus.free;
  BusType _selectedType = BusType.small;

  Color _getColorForType(BusType type) {
    switch (type) {
      case BusType.small:
        return Colors.green;
      case BusType.big:
        return Colors.blue;
      case BusType.tour:
        return Colors.yellow;
    }
  }

  @override
  void dispose() {
    _brandController.dispose();
    _modelController.dispose();
    _plateNumberController.dispose();
    super.dispose();
  }

  void _submitForm() {
    if (_formKey.currentState!.validate()) {
      final newBus = Bus(
        id: '', // Will be generated by Firestore
        brand: _brandController.text,
        model: _modelController.text,
        plateNumber: _plateNumberController.text,
        status: _selectedStatus,
        type: _selectedType,
        colorCode: _getColorForType(_selectedType).value,
      );

      ref.read(busListProvider.notifier).addBus(newBus);
      Navigator.of(context).pop();
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Добавить автобус'),
      content: SingleChildScrollView(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: _brandController,
                decoration: const InputDecoration(labelText: 'Марка'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Пожалуйста, введите марку';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _modelController,
                decoration: const InputDecoration(labelText: 'Модель'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Пожалуйста, введите модель';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _plateNumberController,
                decoration: const InputDecoration(labelText: 'Номер'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Пожалуйста, введите номер';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<BusStatus>(
                value: _selectedStatus,
                decoration: const InputDecoration(labelText: 'Статус'),
                items: BusStatus.values.map((status) {
                  return DropdownMenuItem(
                    value: status,
                    child: Text(status.toString().split('.').last),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedStatus = value!;
                  });
                },
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<BusType>(
                value: _selectedType,
                decoration: const InputDecoration(labelText: 'Тип'),
                items: BusType.values.map((type) {
                  return DropdownMenuItem(
                    value: type,
                    child: Text(type.toString().split('.').last),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedType = value!;
                  });
                },
              ),
              const SizedBox(height: 16),

            ],
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Отмена'),
        ),
        ElevatedButton(
          onPressed: _submitForm,
          child: const Text('Добавить'),
        ),
      ],
    );
  }
} 